buildscript {
    dependencies {
        classpath 'org.yaml:snakeyaml:1.18'
    }
}

plugins {
    id "de.dfki.mary.voicebuilding-legacy" version "5.2.0"
    id "de.undercouch.download" version "3.2.0"
    id 'cz.malohlava.visteg' version '1.0.0' //for visual task graph
}

visteg {
    enabled        = true
    colouredNodes  = true
    colouredEdges  = true
    destination    = 'build/reports/visteg.dot'
    exporter       = 'dot'
    colorscheme    = 'spectral11'
    nodeShape      = 'box'
    startNodeShape = 'hexagon'
    endNodeShape   = 'doubleoctagon'
}

//apply plugin: 'java'

repositories {
    jcenter()
}

dependencies {
    compile 'org.yaml:snakeyaml:1.18'
}

group 'de.uni-saarland.voicebuilding.group2'
version '0.1-SNAPSHOT'

//sourceCompatibility = 1.8

import de.undercouch.gradle.tasks.download.Download
import org.yaml.snakeyaml.Yaml
import groovy.io.FileType

def scriptDir = "$rootDir/scripts"
def dataURL = "https://github.com/ioonaa/voice-ktn-data/archive/master.zip"
def dataZip = "$buildDir/data.zip"
def flacURL = "https://github.com/ioonaa/voice-ktn-data/releases/download/0.1/voice-ktn.flac"
def flacPath = "$buildDir/ktn-voice.flac"
def yamlPath = "$buildDir/voice-ktn.yaml"

task downloadData(type: Download) {
    src dataURL
    dest dataZip
    overwrite false
    onlyIfNewer true
}

task downloadFlac(type: Download) {
    src flacURL
    dest flacPath
    overwrite false
}

task extractChronoTG (type: Copy) {
    dependsOn downloadData
    from zipTree(dataZip), {
        include '**/voice-ktn-chrono.TextGrid'
        eachFile {
            it.path = it.name
        }
    }
    into "$buildDir/"
}

task createYaml {
    dependsOn extractChronoTG
    doLast {
        exec {
            def script = file("$scriptDir/tg_to_yaml.praat")
            commandLine "praat", "--run", script, "$buildDir/voice-ktn-chrono.TextGrid", "$buildDir/voice-ktn.yaml"
        }
    }
}

task extractWav {
    dependsOn downloadFlac, createYaml
    outputs.dir "$buildDir/wav/"
    doLast {
        file("$buildDir/wav").mkdir()
        def yaml = new Yaml().load(file(yamlPath).text.trim())
        yaml.stimuli.each { stim ->
            exec {
                commandLine "sox",
                            file(flacPath), //input file
                            "${buildDir}/wav/${stim.label}.flac", //output file
                            "trim",
                            stim.start, //trim start
                            "=" + stim.end //trim end
            }
            exec {
                commandLine "sox",
                            "${buildDir}/wav/${stim.label}.flac", //input file
                            "-t", "wav", //to wav
                            "-r", "16000", "-b", "16", //resample
                            "${buildDir}/wav/${stim.label}.wav"
            }
            file("${buildDir}/wav/${stim.label}.flac").delete()
        }
    }
}

task extractTxt(type: Copy) {
    dependsOn downloadData
    from zipTree(dataZip), {
        include '**/text/*.txt'
        eachFile {
            it.path = it.name
        }
    }
    into "$buildDir/text"
}

task extractTG(type: Copy) {
    dependsOn downloadData
    from zipTree(dataZip), {
        include '**/tg/*.TextGrid'
        eachFile {
            it.path = it.name
        }
    }
    into "$buildDir/tg"
}

task createLab(type: Exec) {
    dependsOn extractTG
    def script = file("$scriptDir/tg_to_xwaves.praat")
    commandLine "praat", "--run", script, "$buildDir/tg"
}

task moveLab(type: Copy) {
    dependsOn createLab
    from "$rootDir/scripts/", {
        include '**/*.lab'
    }
    into "$buildDir/lab/"
    filter {
        def phoneMapping = [
                '<p:>'  : '_',
                'i:'    : 'i',
                'O:'    : 'O',
                '3`'    : 'r=',
                'Q'     : 'A',
                'R'     : 'r',
                'u:'    : 'u',
                'aI'    : 'AI',
                'eI'    : 'EI',
                '?'     : '_',
                'h-'    : 'h',
                '6'     : 'r=',
                '4'     : 'd',
                'I@'    : 'I',
                '<usb>' : '_',
                'm='    : 'r',
                'l='    : 'l',
                'n='    : 'n',
                'a:'    : 'a',
                'a'     : 'A',
                'o:'    : 'O',
                'y:'    : 'I',
                'e'     : 'E',
                'e:'    : 'E',
                'E:'    : 'E',
                'OY'    : 'OI',
                'y'     : 'I',
                'o'     : 'O',
                '9'     : 'V',
                'x'     : 'k',
                'C'     : 'S',
                'Y'     : 'I',
                '2:'    : 'r='
        ]
        def fields = it.tokenize()
        if (fields.size() == 3) {
            fields[-1] = phoneMapping[fields[-1]] ?: fields[-1]
        }
        fields.join(' ')
    }
    doLast {
        file("$scriptDir/").eachFileMatch(FileType.FILES, ~/.*\.lab/) { labfile ->
            file(labfile).delete()
        }
    }
}

legacyInit {
    dependsOn extractWav, extractTxt, moveLab
}

voice {
    name = 'voicebuilding2017-group2'
    gender = 'female'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == 'groovy-all') {
            details.useTarget group: details.requested.group, name: details.requested.name, version: '2.4.7'
        }
    }
}